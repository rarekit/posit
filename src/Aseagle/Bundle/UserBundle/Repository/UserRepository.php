<?php

namespace Aseagle\Bundle\UserBundle\Repository;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    /**
     * @param array $criteria
     * @param string $orderBy
     * @param string $limit
     * @param string $offset
     * @return Ambigous <\Doctrine\ORM\mixed, \Aseagle\Bundle\UserBundle\Repository\multitype:>
     */
    public function getList($criteria, $orderBy = null, $limit = null, $offset = null) {
        return $this->search($criteria, $orderBy, $limit, $offset);
    }

    /**
     * @param array $criteria
     * @return Ambigous <\Doctrine\ORM\mixed, \Aseagle\Bundle\UserBundle\Repository\multitype:>
     */
    public function getTotal($criteria) {
        return $this->search($criteria, array (), null, null, true);
    }

    /**
     * @param array $criteria
     * @param array $orderBy
     * @param integer $limit
     * @param integer $offset
     * @param string $count
     * @return \Doctrine\ORM\mixed|multitype:
     */
    public function search($criteria, $orderBy, $limit, $offset, $count = false) {
        $query = $this->createQueryBuilder('o');
        if ($count) {
            $query->select('COUNT(o.id)');
        }
        
        $where = 'where';
        foreach ($criteria as $key => $value) {
            if (is_numeric($value)) {
                $query->$where("o.$key = :$key")->setParameter($key, $value);
            } elseif ($value instanceof \DateTime) {
                /*If value is a datetime ranger*/
                switch ($key) {
                    case 'created_from' :
                        $query->$where("o.created >= :$key")->setParameter($key, $value->format('Y-m-d'). ' 00:00:00');
                        break;
                    case 'created_to' :
                        $query->$where("o.created <= :$key")->setParameter($key, $value->format('Y-m-d'). ' 23:59:59');
                        break;
                    default :
                        $query->$where("o.$key = :$key")->setParameter($key, $value->format('Y-m-d'));
                }
            } elseif (is_string($value)) {
                /*If value is a string*/
                $query->$where("o.$key LIKE :$key")->setParameter($key, "%$value%");
            } elseif (is_array($value)) {
                /*If value is an array*/
                $query->$where("o.$key IN (:$key)")->setParameter($key, $value);
            } elseif (is_object($value)) {
                /*If value is an object*/
                $query->$where("o.$key = :$key")->setParameter($key, $value->getId());
            } else {
                
                if ($value == null && $key == 'parent') {
                    $query->$where("o.$key is NULL");
                } elseif ($value != null || is_bool($value)) {
                    $query->$where("o.$key = :$key")->setParameter($key, $value);
                }
            }
            $where = 'andWhere';
        }
        
        if (! empty($orderBy)) {
            foreach ($orderBy as $key => $value) {
                $keyOrder [] = "o.$key";
                $sortValue = $value;
            }
            $query->orderBy(implode(',', $keyOrder), $sortValue);
        }
        
        if ($limit) {
            $query->setMaxResults((int) $limit);
            $query->setFirstResult((int) $offset);
        }
        
        if ($count) {
            return $query->getQuery()->getSingleScalarResult();
        } else {
            return $query->getQuery()->getResult();
        }
    }

    public function loadUserByUsername($username) {
        $q = $this->createQueryBuilder('u')->where('u.username = :username OR u.email = :email')->setParameter('username', $username)->setParameter('email', $username)->getQuery();
        
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf('Unable to find an active admin AseagleUserBundle:User object identified by "%s".', $username);
            throw new UsernameNotFoundException($message, 0, $e);
        }
        
        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (! $this->supportsClass($class)) {
            throw new UnsupportedUserException(
                    sprintf('Instances of "%s" are not supported.', $class));
        }
        
        return $this->find($user->getId());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }
}


